JavaScript
// o servidor ira encjegar apartir da propriedade name
// ambos os dou podem ser escritas
function nome () {} //forma literal
function(){}       //forma generica
document.getAtribute('atributo do html')


OBS:
Dar sempre preferencia para o let. para usar a varavel fora da  função usar o this.variavel.
privado usar let para a função.
publico usar this para a função.



Links
https://caniuse.com/#home        // para saber o suporte de alguma função no java script em determinados navegadores



$tesate = document.addEventListener() // prestar a atenção nos eventos que estão apontados

readonly // somente leitura

isNaN() // mostra se e possivel converter para numeto ex.: isNaN(10) trcebe false pois pode ser covertido prar numero ou seja não e um not a number.   para fazer sentido !isNaN(10) recebe true.

typeof "nome variavel"  // essa função moatra qual o tipo de variavel o

var ok= [] // drepresenação de arrey

ak.push('valor') // inseirndo algo no array.


var variavel = function(){ 
console.log('ok');
}; // todas as vezes que a função for atribbuida a uma variavel temos que colocar o ";"  no final.

nomeFunção.name // mostra o nome da função.

var nome = prompt("qual o seu nome"); 


funcão auto invocavel (IFEE).
  
 (function(){})()
 
 'use strict'; // Não ira permitir que as variaveis sejãm criadas sem  o prefixo var.
 
 
 while (typeof arguments[cont] === 'number'){ }// 0 c onsiderado como falso.
 
 ==================================================================================================================================================================================
 DOM
 
 
 
 <h2 id="ok"> ok </h2>
 
 document.getElementById('ok'); // mostra os contesto de um objeto da DOM de acordo com o seu id
 
 document.getElementById('ok').textContent = 'ru'; // altera os textos da um objeto da DOM que contem o id.





 <h2 class="ru"> ok </h2>
document.getElementsByClassName('ru') // mostra uma lista de objetos da DOM de acordo com sua class
document.getElementsByClassName('ru')[0].textContent= 'ru' // altera o texto puro do elemento de acordo com a posição escolhida e a classe mencionada.

document.getElementsByClassName('ru')[0].innerHTML =  '<b> ru </b>' // demostra a  testo como uma tag html


document.getElementsByTagName('h2'); // mostra uma lista de objetos da DOM de acordo com sua tags


document.querySelector()
document.querySelectorAll()



<div id="msg"></div>
<script>
    (function () {
        var nome = prompt("qual o seu nome");
        document.querySelector('#msg').innerHTML = 'bem vindo <b> '+ nome + '</b>'; // demostra a  testo como uma tag html
    }) ()
</script>






// sempre saber o momento de atribuir as variaveis no momento correto
<body>
<input type="text" id="text">
<button type="button" onclick='escreve()'> ok </button>
<div id="msg"></div>
<script>
        function escreve() {
            var nome = document.querySelector('#text'); // deve ser atribuida ao nome somente quando a fução for chamada
            nome = nome.value;                           // vaçue = valor da tag
            document.querySelector('#msg').innerHTML = 'bem vindo <b> ' + nome + '</b>';
        }
</script>
</body>





<body>
<input type="text" id="text">

<script>
   var $text = document.querySelector('#text');
   var nome = 'Rubens';
   var sobrenome= 'Diego' ;
   document.querySelector('#text').value = nome +" " + sobrenome;  // para colocar informações na tag
    
	
/*	propriedades que diferem do HTML e Javascript:

atributo no HTML     |  propriedade no Javascript

for                        |  forhtml

class                      |  className

readonl                    |  readOnly

maxlength                  | maxLength

cellspacing                |  cellSpacing

rowspan                    |  rowSpan

colspan                    |  colSpan

tabindex                   |  tabIndex

cellpadding                |  cellPadding

contenteditable            |  contentEditable

frameborder                |  frameBorder

usemap                     |  useMap
*/
	
</script>
</body>




aulas web Moderno



Setando elemento da DOM


      

        document.getElementById('primeiro').classList.add('destaque')
        const divs = document.getElementsByTagName('div')
        const divs = document.getElementsByClassName('ultimo')

        document.querySelector('#primeiro').classList.add('destaque')
        document.querySelectorAll('div').forEach(e => e.classList.add("destaque"))
        /* para querySelectorAll 
        '*' = todos
        'div' = tag
        '#nome' = id
        '.nome' = class
        ':not(#nome)' =  todos que não são nome
        ':nth-child(1)' = primeiro filho de umaelemento
        'div:nth-child(1)' = seleciona o primeiro elemento do tipo div conformr o exemplo
        '[atributo personalizado] ' = seleciona atributos personalizados
        
        */





        /*selecionando formularios
        todo formulario deve ter o name


         */

        console.log(document.forms) //retorna um htmlColectopn
        console.log(document.forms[0]) //retorna o formulario na posição
        console.log(document.getElementsByName('pesquisa')) //retorna um node list
        console.log(document.pesquisa) // posso navegar pelos elementos do forms atraz das tags names
        console.log(document.pesquisa.q)



        const lista = document.querySelector('div ul')
        console.log(lista.parentNode) // seleciona o pai da lista
        console.log(lista.childNodes) // seleciona o filho da lista o mesmo tras os textos entre as tags
        console.log(lista.firstChild) //traz o primeiro filho //traz os textos dos espações em branco
        console.log(lista.lastChild) //traz o ultimo filho //traz os textos dos espações em branco
        const  primeiro = lista.firstChild
        console.log(primeiro.nextSibling) //traz o proximo elemento
        console.log(lista.firstChild.nextSibling) // pode ser assim tambem
        console.log(lista.lastChild.previousSibling) // previousSibling tras o elemento anterior

        console.log(lista.children) // tras todos os elementos em um html colection
        console.log( lista.firstElementChild) // tras o primeiro elemento da lista
        console.log( lista.lastElementChild) // tras o ultimo elemeto da lista
        // É possivel misturar os as funções


        const img = document.querySelector('img')

        console.log(img.getAttribute('src')) //recuperar o elemento atravez de string
        console.log(img.src) // recuperando o elemento diretamente
        console.log(img['src'])

        console.log(img.nodeType) //retorna o notetype do elemento // Retorna um numero onde significa o tupo de elemento e o mesmo e.
        console.log(img.nodeName) // retorna o nome do elemento

        const src = img.getAttributeNode('src')
        console.log(src.nodeType)
        console.log(src.nodeName)
        console.log(src.nodeValue)

        const link = document.querySelector('a')
        link.firstChild.nodeValue = "novo texto" // e possivel inserir um novo testo no codigo

        console.log(document.pesquisa.q.value = 'ok') // paara alterar um formulario


        const lista = document.querySelector('div ul[destino="escritório"]')
        console.log(lista.children)
        console.log(lista.getAttribute('destino'))  // para buscar atributos personalizados o getAttribute e mais recomendado
        console.log(lista.hasAttribute('destino'))
        lista.setAttribute('destino' , 'empresa') //pode alterar o nome do eu atributo com essa função
        lista.setAttribute('status' , 'aberta') // tambem pode adicionar atributos
        lista.removeAttribute('destino') //deleta um atributo
        console.log(lista.dataset)      //todo atributo ue compoen o data pode ser buscado pór data


        //somente leitura

        const lista = document.querySelector('#compras')

        console.log(lista.attributes) // tras a lista de atributos
        console.log(lista.attributes[0])// traz o atributo na posição
        console.log(lista.attributes.destino) // notação por pontos mas não pode ter "-"
        console.log(lista.attributes['data-urgencia'])
		        
        //Class list

        const classes = document.querySelector('div').classList
        classes.add("destaque")  // adiocona uma classe
        classes.remove('destaque') // remove classe
        classes.toggle('destaque') //se existe remove e se não existir adiciona a classe a classe

        console.log(classes.contains('destaque')) //verifica se contem a classe
        console.log(classes.length) // tamanho da classe

		const body = document.querySelector("body")

        const div1 = document.createElement("div") // cria um elemento especifiacado
        div1.classList.add('destaque') //   o classList acixiona uma classe a um elemento
        div1.innerHTML = "primeiro" // insere lemento html
        const div2 = document.createElement('div')
        div2.setAttribute('wm-atributo' , 'valor') // adiociona ou altera um atributo
        div2.innerHTML = 'segundo'

        const p = document.createElement('p')
        p.innerHTML= "Tereiro"
        const div3 = document.createElement('div')
        div3.appendChild(p) // o appendChild adiciona um elemento desnto de outro especificado.

        body.appendChild(div1)
        body.appendChild(div2)
        body.appendChild(div3)

        const texto = document.createTextNode('Antes....')
        div3.insertBefore(texto , div3.childNodes[0])

        const div4 = div3.cloneNode(true)
        body.appendChild(div4)
        body.removeChild(div3)
        console.log(div.innerText) // traz apenas o texto
        



____________________________________________________________________________________________________________________________________________________________________________


objetos


new para criar um novo objeto.

objeto1 = //objeto2 eles se referenciam

  
===========================================================================

// objeto literal

caneta = { // criando objetos com function dentro. (não muito eficiente
	cor: 'preta',
	mudaCor: function (cor) {
		this.cor = cor;
        }
    }
	
============================================================================

//Objeto construtor

 var Caneta = (function(window){
                'use strict';

                function _caneta(preco, cor){
                
                    //privado // somente sera vista dentro do construtor
                    var color = cor || 'black';
                    //publicas // podera ser alterada quando o onjeto for chamado
                    this.preco = preco || 1;                
                    this.mudarCor = function(cor){
                        if(cor !== 'red' && cor !== 'blue' && cor !== 'black'){
                            return;
                        }
                        color = cor;
                    }

                    this.pegaCor = function(){
                        return color;
                    }
                }

                return _caneta;
            })(window)

==================================================================================================

____________________________________________________________________________________________________________________________________________________________________________

Eventos

<body>
<button id="botao" class="btn btn-danger" >botão</button>
<script>

var botao = document.getElementById('botao');   // recupero pelo id ou outros

botao.addEventListener("click" , ok);  // Adiciono um evento no mesmo | primeiro o que sera feito e depois a função que sera executada
   
   function ok() {
        alert("deu");
    }
</script>
</body>


//propagação = CApacidade dos eventos de percorrerem a estrutura html, desde o elemento original e o nivel mais alto (uma pagia, e o bodu)

=================================================================================================
// propagação de eventos 
<body>
<div class="conteiner">
    <h1>propagação do event</h1>
    <div id="d1" style="background: red; padding: 25px">
        testo dentro da div
        <span style="background: yellow">testo dentro da span</span>
    </div>
</div>
<script>
var $d1  = document.querySelector("#d1");
var $d1Sapn = document.querySelector("#d1 span");
$d1.addEventListener('click' , function () {
    console.log('click in $D1');
});
$d1Sapn.addEventListener('click' , function () {
    console.log('click in $D1Span');
});
document.addEventListener('click' , function () {
    console.log('click in Documant');
});
</script>
</body>

==========================================================================================================
//Objeto evento


<body>
<div class="conteiner">
    <h1>propagação do event</h1>
    <div id="d1" style="background: red; padding: 25px">
        testo dentro da div
        <span style="background: yellow">testo dentro da span</span>
    </div>
</div>
<script>
var $d1  = document.querySelector("#d1");
$d1.addEventListener('click' , function (e) {
    console.log(e); // objeto event
    console.log(e.currentTarget); // quem esta atrelado o evento
    console.log(e.target); // que e  oevento
    console.log(this); // o elemento a quem disparou o evento
    e.stopPropagation(); // parar a propagação dentro da lista de eventos
});
</script>
</body>

=============================================================================================================

Delegação de eventos

<body>
    <h1 style="color: #b92c28 ; padding: 40px">Rubens</h1>
</div>

    <ul>
        <li>click 1</li>
        <li>click 2</li>
        <li>click 3</li>
        <li>click 4</li>
        <li>click 5 </li>
    </ul>
    <script>
        var $ul = document.querySelector('ul');
        var $li = document.querySelectorAll('li');
        /*
        $li[0].addEventListener('click', function (e) {
            console.log('li');
        })
*/
        /*
        var x = 0;
        while ($li[x]) {
            $li[x].addEventListener('click', function (e) {
                console.log($li.value);
            });
            x++;
        }
*/
        $ul.addEventListener('click', function (e){
            e.stopPropagation()
            console.log(this);
            console.log(e.currentTarget);
            console.log(e.target);
           console.log(e.target.nodeName);
        })
    </script>
</body>

========================================================================================================================
anotar regras aula 45 mp ,pmenyo 12:04

console.log(Boolean()); // false vazio ja e falso automaticamente.
console.log(Boolean("")); // false  somente strings vazias,
console.log(Boolean(" ")); // true
console.log(Boolean("ok"));// true
console.log(Boolean(10));// true


 var x= "";

    if(x){ // nesses casos pra verificar uma variavel vazia não e necessario colocar o campo === .
        console.log('sim');
    }else {
        console.log('nao');
    }
	
========================================================================================================================

	<body>
<textarea id="msg"></textarea>
<script>
    (function () {
        $msg = document.getElementById('msg');
        $msg.addEventListener('keypress' , function (e) {
            console.log('keypress', e.key);
        });
        $msg.addEventListener('keyup' , function (e) {
            console.log('keyup' , e.key);
        });
        $msg = document.addEventListener('keydown' , function keydown(e) {
            console.log('keydown' , e.key);
        });
    })()
</script>
</body>

//keypress
//	keyup :somente quando e deisparado algum caractere apartir do teclaco. soment eescuta a tecla do teclado. potras formas como o colas ou entradas de audio não dispara  o evento.
//keydown
// Input : Dar preferencia ao keyup o mesmo realve o problema do keyup
=========================================================================================================================



//Validae botão de submit de acordo com checkbox

<body>


<form action="#" >
    <textArea cols="30" rows="10" readonly id="contrato">contrato</textArea>
    <div>
        <label for="chk">
            <input id="chk" type="checkbox" checked> li e aceito este cintrato
        </label>
    </div>
    <div>
        <input type="submit" value="Continuar" id="btn">
    </div>
</form>
<script>
    (function () {
        'use strict'
        var $btn = document.getElementById("btn");
        var $chk = document.getElementById("chk");
        checar();
        $chk.addEventListener('change' , function (e) { // evento para verificar estado do check box "mudar"
            checar();
        })
        function checar() {
            $btn.disabled = !$chk.checked;
        }
    })()
</script>
</body>







=====================================================================================================================================
// colocar varios eventos em varos votoes do mesmo tipo
//não e possivel adcionar vario eventos dentro do mesmo variavel sem fum loop



<body>
<button type="button" class="ok">botão 1</button>
<button type="button" class="ok">botão 2</button>
<button type="button" class="ok">botão 3</button>
<script>
    (function () {
        'use strict'
        var $oks = document.querySelectorAll(".ok")
        for(var i = 0 ; i < $oks.length ; i ++ ){
            $oks[i].addEventListener('click' , teste)
        }
        function teste(e) {
            console.log(this.textContent)
        }
    })()
</script>
</body>


==============================================================================================================================================


<body>
<div>
    <input type="text" id="txtTask">
    <button id="btn" type="button">Cadastrar</button>

    <ul>
        <li>ok</li>
    </ul>
</div>
<script>
    (function () {
        'use strict'
        var $ul = document.querySelector('ul');
        var $lis = $ul.querySelectorAll('li')
        var $txtTeask = document.querySelector('#txtTask');
        var $btn = document.querySelector('#btn');
        $btn.addEventListener('click' ,  addTeask )
        $txtTeask.addEventListener('keyup' , function (e) {
            if(e.keyCode === 13){
                addTeask();
            }
        })
        //for (var i = 0 ; i< $lis.length ; i++){
           // $lis[i].addEventListener('click' , toogleDone)
          //  addEvent($lis[i]);
        //}
        $ul.addEventListener("click", function (e) {
            if(e.target.nodeName  === "LI"){ // olha o tipo de lista 
                toogleDone(e.target); //passa para a função a li
                removeTeask(e.target); // função para remosver o elemento li
            }
        })
        function removeTeask(li) {
            if(confirm('deseja Excluir ' + li.textContent + '?') ){
                console.log(li.parentNode);
                li.parentNode.removeChild(li);
            }
        }
        function toogleDone(li) {
            //$lis.classList.add()
            //$lis.classList.remove()
            li.classList.toggle('done') // se tem a classe ele tira se não tem ele colocar.
        }
        function  addTeask () {
            // var teask = '<li>' + $txtTeask.value + '</li>';
            // $ul.innerHTML += teask; MANEIRA MEUITO ANTIGA
            var li = document.createElement("li"); // cria um novo elemento
            var text =  document.createTextNode($txtTeask.value); //cria um texto 
            li.appendChild(text); // add o testo ao elemento li
            $ul.appendChild(li); // add  o li ao elemento ul
            $txtTeask.value = ""; 
            $txtTeask.focus(); // foca o elemento ao comapo aplos finelizar o evento
          //  addEvent(li);
        }
       // function addEvent(li){
        //    li.addEventListener('click' , toogleDone)
      //  }
    })()
</script>
</body>

===============================================================================================================================================




DOM 2

document.setAtribute('tipo de elemento' , valor);



===============================================================================================================================================

Strings

Length = tamanho da string quantidade de caracteres incluindo os espaços em breanco.

replace() = procura um valor e substitui pot outro ex: var ok = ok ///// ok.replace('o' , k);  ///// resultado 'kk' 
			para substituir se deve utilizar expreções regulares.

indexOf() =  retorna a primeira posição de um caractere. se retornar -1 e porque não existe.

lastIndexOf() = retorna a ultima de um caractere. se retornar -1 e porque não existe.

slice() = cortar string //////// var ok = 'abcdefghij' //// ok.slice(5) corta apartir da 5 posição ate o fim
						//////// var ok = 'abcdefghij' //// ok.slice(5 , 8) orta apartir da 5 posição ate a 7 posição a 8 posição e excluida

substring() =  cortar string //////// var ok = 'abcdefghij' //// ok.substring(5) corta apartir da 5 posição ate o fim
						//////// var ok = 'abcdefghij' //// ok.substring(5 , 8) orta apartir da 5 posição ate a 7 posição a 8 posição e excluida
						////// diferença com o slice e que se inverter os numeros o substring entende e se alinha.

split() = quebra a string de acordo com o que foi passado por paramentro e devolve como um array ////// var ok = 'abc def ghij' ok.split(' ') //////// resltado ['abc','def','ghij'].

toLowerCase() =  tranforma tudo para maiusculo.

toUpperCase() =  tranforma tudo para minusculo.

valueOf() = retorna o valor primitivo da variavel.



==============================================================================================================================================

Number
******** propriedades estaticas representma uma instancia geral
******** 15 .tostring(2) sempre colocar o espaço para não confundir ou
******** (15).tostring(2) sempre colocar o entre parentes para não confundir.





MAX_VALUE =  Number.MAX_VALUE ///// Representa o maior numero possivel

MIN_VALUE = Number.MIN_VALUE ///// Representa o menor numero possivel

toFixed() = trata as casas decimais //////// var n = 1,254554  n.toFixed(2) //// resultado 1,25

toPrecision() = contas quantas casas decimais deve ter no numero.

toString() = converte para numero para string.
				converte para estring e tambem converte para outras bases. //// ok = 10 ok.toString(2) //// resultado "1100"

toExponemtial() =  retorna a notação cientifica de um numero. se não passar o paremeto conciderara a base 10.


===============================================================================================================================================

Math

min() = retorna o  menor numero que foi passado por parametro.

max() = retorna o  maior numero que foi passado por parametro.
 
roud() =  arredondar um numero. 

floor() = arrendonda os numeros para baixo.

ceil() = arrendonda os numeros para cima.

pow() = expoente de numero Math.pow(2 , 3 ) ///// resltado 8 ou 2**3 = 8

sqrt() =  raiz quadrada Math.sqrt(49) //// resposta = 7

Cbrt =    raiz cubica Math.sqrt(8) //// resposta = 2

random() = traz um numero aleatorio entre 0 e 1;

PI = numero pi = 3,14



===============================================================================================================================================

Array

<script>
    // el = elementos do array
    // i = indice do array
    // arr = o proprio array
    var ok = [1,'12',2,3,5,4,5 , '12'];
    var a = ok.length // retorna o tamenho a array
    var  everyOk = ok.every(function (el ,indice , arr ){ // realiza os testes no array e retora true false
        return typeof el === 'number'
    })
    console.log(everyOk);
    var  someOk = ok.some(function (el ,indice , arr ){ // retorna true se somente um elemento for verdadeiro de acordo com o teste
        return typeof el === 'number'
    })
    //  console.log(someOk);
    var filterOk = ok.filter(function (el , i , arr) {
        return typeof el === "number"
    })
    //console.log(filterOk)
    ok.forEach(function (el , i , array) {
        // console.log('elemento' , el , 'indice'  , i , array.toString());
    })
    var   indexOfOk  =  ok.indexOf('12'); // retorna a posição do elemento passado por parametro. varifica do primeiro ao ultimo 
    //  console.log(indexOfOk);
    var   lastIndexOfOK  =  ok.lastIndexOf('12' , 1); // retorna a posição do elemento passado por parametro. varifica do ultimo ao primeito
    //  console.log(lastIndexOfOK);
    var numeros = [1,2,3,5,4,5];
    numeros =  numeros.map(function (el , i , arr) { //percorre o array alterando os seus elementos
        return el*i;
    })
    //  console.log(numeros)
    var tt = ok.concat(numeros); //concatena os 2 arrays ex [1,2,3]  [3,2,1]  = [1,2,3,3,2,1]
    var ttt = ok.concat(numeros , 2 ,6);
    // console.log(tt);
    //  console.log(ttt);
    var teste = ttt.join(); //concatens o afrray e o tranforma em uma string
    var teste2 = ttt.join('--'); // o parametro e um criterio de separação
    var novoitem =tt.push('novo item' , 'ok') //adiciona um novo elemento na arrauy e retorna o novo tamneho da array
    var removido = tt.pop() // remove o ultimo item e devolve a variavel
    var removePrimeito = tt.shift() // remove o primeiro item e devolve a variavel
    tt.unshift('novo item')  //adiciona um novo elemento no inicio da array na arrauy e retorna o novo tamneho da array

    var reduce = numeros.reduce(function (anterior , atual , indice , propriaArray) { // percorre o arry pegando o anterior e o proximo e realizando as operações e e possivel utilizat  o indice /////// de inicio ao fim
        return anterior + atual; // retorna a some total do arry
    } )

    var reduce = numeros.reduceRight(function (anterior , atual , indice , propriaArray) { // percorre o arry pegando o anterior e o proximo e realizando as operações e e possivel utilizar  o indice ////////// fim ao inicio
        return anterior + atual; // retorna a some total do arry
    } )
    ttt.reverse() // retorna o array com a ordem invertida
    var slice = ttt.slice(2)// retorna a POSIÇÃO inicia  ate o final em um outro array
    var slice = ttt.slice(2 , 5)// retorna a POSIÇÃO inicia  ate a posição final em um outro array
    var indicesRemovidos =  ttt.splice(2 , 5, '2' , '2'); // esse mrtoto pode incluit  e remosver elementos al mesmo tedmpo de acordo com os parametro
    // 1° paremetro           = apartir de qual elemento sera feita a alteração
    // 2° parameto            = quantos elementos serão deletados aparetie do elemento do primeira parametro;
    //3° parameto para frente = os elemento que irei adicionar apartir do primeiro parametor
	var texto = ttt.tostring() // tranforma o array em string
</script>

===============================================================================================================================================

Datas

<script>

    // O tempo fica cadastrado no momento em que o objeto e intanciado.
    var minhaData = new Date(); //mostra a data atual
    minhaData.getDay(); //mostra o sia da semana 0 = domingo, 1 = segunda ...
    minhaData.getDate(); // dia do mês
    minhaData.getMonth(); // o mês janeiro = 0 ... desembro = 11
    //minhaData.getYear(); // mosta a quantidade de anos que se passsarm desde 1900;
    minhaData.getFullYear(); // mostra o ano
    minhaData.getHours(); // mostra a hora
    minhaData.getMinutes(); // mostra a minutos
    minhaData.getSeconds(); // mostra a segundos
    minhaData.getMilliseconds(); // mostra a milesegundos
    minhaData.getTime(); // numero em milesegundo que passaram dese de janeiro 1970

    minhaData.setDate(); //
    minhaData.setMonth(2); // o
    //minhaData.setYear(); //
    // minhaData.setFullYear(2019); // mostra o ano
    minhaData.setHours(5); //
    minhaData.setMinutes(4); //
    minhaData.setSeconds(25); //
    minhaData.setMilliseconds(3); //
    minhaData.setTime(0); //

    // ANO MES DIA HOTA MINUTO SEGUNDO MILESEGUNDOS
    minhaData = new Date(2019 );
    minhaData = new Date(2019 , 11 );
    minhaData = new Date(2019 , 12 , 23);
    minhaData = new Date(2019 , 12 , 23 , 14 , 30 , 15 , 55);
    minhaData = new Date("2019/12/31"); // Não recomendado a usar

</script>



=========================================================================================================================================================================================

// Temporizadores

//não são da ecma script somente do java script


var intarvaloID = setTimeout(função , 'tempo em lilesegindos'); = // faz uma fanção executar apos um determinado periodo de tempo. o ,es,o recebe um parametro com o seu id. caso seja necessario paralo usamos o id.

    intarvaloID =  setInterval(função , 'tempo em lilesegindos'); // = faz uma fanção executar apos um determinado periodo de tempo em loop. o ,es,o recebe um parametro com o seu id. caso seja necessario paralo usamos o id.
clearTimeout(id);

clearInterval(id);  // = irá parar os intervalos;

===========================================================================================

<script>
    var n = 0 ;
    // somente do java scrip
    var intevalo0 = setTimeout(soma , 1000);

   var intervalo =  setInterval(soma , 1000);

    function soma() {
        console.log('n = ' , (++n) );
        if(n >= 10){
           clearInterval(intervalo)
        }
    }
</script>


//exemplo pop up

<head>
        <title>Javascript Completo</title>
        <meta charset="utf-8">
        <style>
            .banner{
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                box-shadow: 0 0 0 1000px rgba(0,0,0,.8);
                display: none;
            }
            
            .banner__close{
                position: absolute;
                top: 5px;
                right: 5px;
            }
        </style>
    </head>
    <body>
        <h1>Javascript Completo</h1>
        <div class="banner">
            <h2>Banner Irritante</h2>
            <button class="banner__close">X</button>
            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nisi debitis autem, consectetur, explicabo quisquam voluptatibus nobis quaerat repellat nam, ad vel similique doloremque, doloribus labore quasi provident. Excepturi, odit, velit.</p>
            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nisi debitis autem, consectetur, explicabo quisquam voluptatibus nobis quaerat repellat nam, ad vel similique doloremque, doloribus labore quasi provident. Excepturi, odit, velit.</p>
            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nisi debitis autem, consectetur, explicabo quisquam voluptatibus nobis quaerat repellat nam, ad vel similique doloremque, doloribus labore quasi provident. Excepturi, odit, velit.</p>
        </div>
        <script>
            (function () {
                var $banner = document.querySelector('.banner');
                var $bannerClose = document.querySelector('.banner__close');
                $bannerClose.addEventListener('click' , esconder)
                var intervaloEsconde = null;
                function mostrar() {
                    $banner.style.display = 'block'
                    intervaloEsconde = setTimeout(esconder , 5000);
                }
                function esconder() {
                    $bannerClose.removeEventListener('click' , esconder);
                    $banner.parentNode.removeChild($banner);
                    clearTimeout(intervaloEsconde);
                }
                setTimeout(mostrar , 5000);
            })()
        </script>
    </body>





====================================================================================================================================================================================================================

invocar função por Call e apply

===================================================================================================================================================================================================================================



Objeto

principios importantes
1. abstração
2. encapsulameto
3. herança (prototype)
4. polimorfismo



//função contrutora
function obj2(ok) {
this.ok = ok; // publico
let t = 10; // privado
  this.getT = () =>{
      return t - 1;
  }
}

//Função factory
function criarFuncionario( nome , salario , faltas) {
    return{
        nome,
        salario,
        faltas,
        getSalario(){
            return(salario/30)*(30-faltas)
        }
    }
}
const f1 = criarFuncionario('Diego' , 1500 , 4);
console.log(f1.getSalario())



// set e get

const oo = {
    t: 10,
    get v(){
       return  this.t++
    },
    set v(o){
      if (o > this.t){
          this.t = o;
      }
    }
}

console.log(oo.v);
console.log(oo.v);

oo.v = 20;

console.log(oo.v);
console.log(oo.v);





// Funções de objeto
const OO = {
    nome: "rubens",
    idade: 26,
    telefone: ' 91544066',
}

console.log(Object.keys(OO)); // mostra as chaves do objeto
console.log(Object.values(OO)); // mostra os valores dos objeros
console.log(Object.entries(OO)); // mostra chaves e valores de objetos  em arrays
console.log(filho.hasOwnProperty(filho.nome)) // para saber se a variasvel pertence ao objeto de origem

/*
Object.defineProperties(OO , 'dataNacimento' , { // o nome do objeto , o nome da variavel e um objeto falando as propriedades
    enumerable : true, // enumera na lista de valores.
    writable : false, // permite alterar a variavelb.
    value: '04/03/2019' // o valor da variavel.
})
*/

//Object.assign()
// concatena as variaveis de um objeto em um objeto destino. se a variavel tiver  o mesmo nome sera atrivuido o ultimo valor da mesma.

const dest = {a:1}
const o1 = {b: 2}
const o2 = {c: 3 , a: 4}
const o3 = {t:{x:3 , c:4}}

const obj = Object.assign(dest , o1 , o2 , o3);
console.log(dest);


Object.freeze(dest); // bloqueia as alterações do objeto 

Object.setPrototypeOf(outroFilho , pai ) // cria a heranca entre objetos

=====================================================================================================================================================================================================

Heraça

//decorator padrão de projeto

const avo = {att1 :"A"}
const pai = {__proto__: avo , att2: "B"}
const filho = {__proto__: pai , att3: "C"} // __proto__ cria a relação de herança.
const outroFilho = {att4 : "F"}
console.log(filho.att2)
Object.setPrototypeOf(outroFilho , pai ) // cria a heranca entre objetos e uma alternativa

console.log(outroFilho.att1)





let pai = {nome: "diego", corCabelo: "preto" }
const filho = Object.create(pai)
console.log(filho.nome)
const outroFilho = Object.create(pai, {
nome: {value: 'diego' , writable: false , enumerable: true}
});
console.log(Object.keys(filho))
console.log(Object.keys(outroFilho))
console.log(filho.hasOwnProperty(filho.nome)) // para saber se a variasvel pertence ao objeto de origem


 
 
 //prototype aula 94
 
 
 
 Evitando modificadores
 
 const obj = Object.preventExtensions({ // n]ao permite que o objeto seja extencivel
    nome: "diego" , sobrenome:'Santana'
})
const teste = Object.isExtensible(obj) //verifica se o objeto e extencivel ou seja não pode add mais atrutos no objeto, mas permite deletar variaveis de dentro do objeto
console.log(teste)

const  pessoa = {nome: "Ruebens" ,Sobrenome : 'Diego' }
Object.seal(pessoa);  // não deica add ou excluir variaveis /// sela o 


const teste2 = Object.isSealed(pessoa) // vatrifica as variaveis se setão seladas
console.log(teste2)


Object.freeze(pessoa) // trava todo o objeto tudo vira constante dentro do objeto



//Herança em class

class ok extends pai{  // a herança em classe representado por herança
}



 
===================================================================================================================================================================================================================================================


// Destructuring
// pode destruturar uma string ou array e objetos

let [l,e,...tras] = "Diego";
console.log(l,e,tras);

let [ a,b,c] = [1,2,5];
console.log(a,b,c);

let  [x,,t] = [1,5,4];
console.log(x,t);


const {idade , nome} = {nome: "Rubens" , idade: 26}
console.log(nome , idade)





====================================================================================================================================================================================================================================

// operador  ... rest(juntar) / spread(espalhar)


// spread com objeto

const func = { nome: "rubens" , idade: 25 }
const clone  = {ativo: true , ...func} // com o operado ... eu posso juntar um objeto ao outro

// spread com array
const arr = [1,2,3]
const arr2 = ['rubens' , ...arr]  // com o operado ... eu posso juntar um array ao outro


================================================================================================================================================================================================================




// map
const  ok = new Map([
    [function () {} , 'Função'],
    [{} , 'objeto'] ,
    [123 , 'numeros']
])

ok.forEach((vl , ch) =>{
  console.log(vl , ch)

})

console.log(ok.has(123)) // verificar se chave existe
console.log(ok.size) // tamanho do map
ok.delete(123)  // deleta a informação apartir da chave
ok.set(555 , 'a') // insere valores   //// obs.: se a chave ja exitir a informação da mesma  sera subistituida
ok.keys() //mostra as chaves 
ok.value() // mostra os valores


console.log(ok)


================================================================================================================================================================================================================



// Set
// estrutura sem indices
// não aceita informações repetidas
const ok= new Set()

ok.add("rubens")
ok.add('Diego').add("santana")

console.log(ok)
console.log(ok.size) //mostra o tamnaho
console.log(ok.has("rubens")) // varifica se exite
ok.delete("santana") // apaga elemento

// outra fonma de adicionar
const arr = [1,2,3,5,4,8,4]
const set2 = new Set(arr)
console.log(set2)



================================================================================================================================================================================================================================================

// Tipos de for

let ok = [1,5]
for(let i in ok){ // for resumoido ondo o ok e um array ou coisa parecida e o i tras os indices
    console.log(i)
}

for (let num of  ok){ // os numeros recebems os valores quando usado o of bom parfa usar em map , set , string
    console.log(num)
}


for (let i = 0 ; i < ok.length ; i++ ){  // for convencional
    console.log(i)
}


=============================================================================================================================================================================================================================================================================

// promisse

function falarDepoiss ( segundos , frase) {
    return new Promise((resolve , reject) => { // promessa = se o parametro resolve for executado o mesmo ira disparar a funçao  then
      setTimeout(()=>{
          resolve(frase) // aceita somente um parametro 
      },segundos *1000)
    })
}

falarDepoiss(3 , "frase Teste")
.then (frase  => frase.concat("??????")) // as funções do then podem ser podem ser alinhas onde cada uma recebe a resposta da outra.
.then((outraFrase => console.log(outraFrase + " ok")))
.catch(e => console.log(e , "não deu" )) // caso não seja utilizado os thens entra o tratamento do catch

